<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Sunday, May 24, 2015, 2:52 PM -->
<!-- MuClient version 4.98 -->

<!-- Plugin "Galabans_Partroxis_Plugin" generated by Galaban the XML Wizard -->

<!--
A simple Partroxis maze assistant
-->

<muclient>
<plugin
   name="Galabans_Partroxis_Plugin"
   author="Galaban"
   id="b8cffcaabbf1abc78475946b"
   language="Lua"
   purpose="A simple maze solver for the Partroxis maze"
   save_state="y"
   date_written="2015-05-24 14:48:35"
   requires="4.98"
   version="1.0"
   >
<description trim="y">
<![CDATA[
This is Galaban's Partroxis plugin.

While in the Partroxis maze, it will show you the next exit to take. When a wrong direction is chosen, you can get a speedwalk back to the farthest room.
]]>
</description>

</plugin>

<include name="constants.lua"/>


<aliases>

<alias
   match="partroxis return"
   enabled="y"
   script="partroxis_return"
   sequence="100">
</alias>

<alias
   match="partroxis reset"
   enabled="y"
   script="partroxis_reset_data"
   sequence="100">
</alias>

<alias
   match="partroxis help"
   enabled="y"
   script="partroxis_show_help"
   sequence="100">
</alias>

<alias
   match="partroxis guide"
   enabled="y"
   script="partroxis_alias_guides"
   sequence="100">
</alias>

<alias
   match="partroxis showexits"
   enabled="n"
   script="show_partroxis_exits"
   sequence="100">
</alias>

<alias
   match="partroxis debug"
   enabled="n"
   script="show_partroxis_debug_data"
   sequence="100">
</alias>

<alias
   match="partroxis printmap"
   enabled="n"
   script="show_partroxis_debug_printmap"
   sequence="100">
</alias>


<alias
   match="^(e|ea|eas|east)$"
   enabled="n"
   group="partroxis_movement"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>
    last_direction = "e"
    Send("east")
  </send>
</alias>

  <alias
   match="^(w|we|wes|west)$"
   enabled="n"
   group="partroxis_movement"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>
    last_direction = "w"
    Send("west")
  </send>
  </alias>

  <alias
   match="^(n|no|nor|north)$"
   enabled="n"
   group="partroxis_movement"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>
    last_direction = "n"
    Send("north")
  </send>
  </alias>

  <alias
   match="^(s|so|sou|south)$"
   enabled="n"
   group="partroxis_movement"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>
    last_direction = "s"
    Send("south")
  </send>
  </alias>

  <alias
   match="^(u|up)$"
   enabled="n"
   group="partroxis_movement"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>
    last_direction = "u"
    Send("up")
  </send>
  </alias>

  <alias
   match="^(d|do|dow|down)$"
   enabled="n"
   group="partroxis_movement"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>
    last_direction = "d"
    Send("down")
  </send>
  </alias>

</aliases>


<triggers>
  <trigger
   enabled="n"
   group="partroxis_exit_triggers"
   match="The Partroxis has opened yet again."
   send_to="12"
   sequence="100"
  >
  <send>
    partroxis_area_reset()
  </send>
  </trigger>

  <trigger
   enabled="n"
   group="partroxis_exit_triggers"
   match="Obvious exits from [*"
   send_to="12"
   sequence="100"
  >
  <send>
    reset_curr_room_exits()
    DoAfterSpecial(0.1,"partroxis_exit_complete()",sendto.script)
  </send>
  </trigger>

  <trigger
   enabled="n"
   expand_variables="y"
   group="partroxis_exit_triggers"
   match="^ North          \: (.*?)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>
     if(curr_room ~= nil) then
         curr_room.exits.n = Trim("%1")
     end
  </send>
  </trigger>

  <trigger
   enabled="n"
   expand_variables="y"
   group="partroxis_exit_triggers"
   match="^ East           \: (.*?)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>
     if(curr_room ~= nil) then
         curr_room.exits.e = Trim("%1")
     end
  </send>
  </trigger>

  <trigger
   enabled="n"
   expand_variables="y"
   group="partroxis_exit_triggers"
   match="^ South          \: (.*?)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>
     if(curr_room ~= nil) then
         curr_room.exits.s = Trim("%1")
     end
  </send>
  </trigger>

  <trigger
   enabled="n"
   expand_variables="y"
   group="partroxis_exit_triggers"
   match="^ West           \: (.*?)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>
     if(curr_room ~= nil) then
         curr_room.exits.w = Trim("%1")
     end
  </send>
  </trigger>

  <trigger
   enabled="n"
   expand_variables="y"
   group="partroxis_exit_triggers"
   match="^ Up             \: (.*?)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>
     if(curr_room ~= nil) then
         curr_room.exits.u = Trim("%1")
     end
  </send>
  </trigger>

  <trigger
   enabled="n"
   expand_variables="y"
   group="partroxis_exit_triggers"
   match="^ Down           \: (.*?)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>
     if(curr_room ~= nil) then
         curr_room.exits.d = Trim("%1")
     end
  </send>
  </trigger>

</triggers>


<!--  Script  -->

<script>
<![CDATA[

require "gmcphelper"
require "wait"


-------------
-- GMCP Items
-------------
player_state = -1
function OnPluginBroadcast (msg, id, name, text)
   if id == "3e7dedbe37e44942dd46d264" then -- gmcphandler
      if performing_maintenance == true then
         queue_broadcast(msg, id, name, text)
         return
      end

      if (text == "room.info") then
         blinded = false
         res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","room.info")
         luastmt = "gmcpdata = " .. gmcparg
         assert (loadstring (luastmt or "")) ()

         got_gmcp_room()         
      end 

      if (text == "char.status") then
         res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","char.status")
         luastmt = "gmcpdata = " .. gmcparg
         assert (loadstring (luastmt or "")) ()
         player_state = tonumber(gmcpdata.state)
      end 

   end --if gmcphandler
end

function got_gmcp_room()
    local room_id = gmcpval("num")

    -- Note("Room Number: "..room_id)

    if (curr_room ~= nil) then
        lastroom = {
          id = curr_room.id,
          exits = {},
          correct_dir = "",
          next_id = -1,
          wrong_dir1 = "",
          wrong_dir2 = "",
          exits = {}
        }
        lastroom.exits.n = curr_room.exits.n
        lastroom.exits.e = curr_room.exits.e
        lastroom.exits.s = curr_room.exits.s
        lastroom.exits.w = curr_room.exits.w
        lastroom.exits.u = curr_room.exits.u
        lastroom.exits.d = curr_room.exits.d
    end
    curr_room = {
      id = tonumber(room_id),
      exits = {},
      correct_dir = "",
      next_id = -1,
      wrong_dir1 = "",
      wrong_dir2 = ""
    }
    
	partroxis_room_entered()
end

function reset_curr_room_exits()
    if (curr_room == nil) then
        return
    end
    curr_room.exits.n = ""
    curr_room.exits.e = ""
    curr_room.exits.s = ""
    curr_room.exits.w = ""
    curr_room.exits.u = ""
    curr_room.exits.d = ""
end

-----------------
-- Alias Handlers
-----------------

function partroxis_return()
	local c_grey = ANSI(22)..ANSI(37)

    if (curr_room == nil or curr_room.id < 5763 or curr_room.id > 5812) then
        AnsiNote(c_grey.."Galaban whispers 'It looks like you're not in the maze.'")   
        return
    end

    local runstr = "run "
    local curr_id = curr_room.id
    while(curr_id > 0) do
        local room = rooms[curr_id]
        if (room == nil or room.correct_dir == nil or room.correct_dir == "") then
            curr_id = -1
        else
            local next_dir = ""..room.correct_dir
            if (next_dir == "enter gate") then
                runstr = runstr .. ";enter gate;run "
            else
                runstr = runstr .. next_dir
            end
            curr_id = room.next_id
        end
    end
    if (runstr == "run ") then
        local c_grey = ANSI(22)..ANSI(37)
        AnsiNote(c_grey.."Galaban whispers 'It looks like you've never been here before.  Just follow the guide.'")
        correct_exit()
        return
    end
    runstr = runstr..";exits"
    Execute (runstr)
end

function partroxis_reset_data()
	local c_grey = ANSI(22)..ANSI(37)

    if (curr_room == nil or curr_room.id < 5763 or curr_room.id > 5812) then
        AnsiNote(c_grey.."Galaban whispers 'It looks like you're not in the maze.'")   
        return
    end
    if (tablelength(rooms) == 0) then
        AnsiNote(c_grey.."Galaban whispers 'There's nothing to reset.'")
        return
    end
    AnsiNote(c_grey.."Galaban whispers 'Did something go wrong? It was probably a shift in the Partroxis.'")
    AnsiNote(c_grey.."Galaban whispers 'I've reset everything the guides' memory. Sorry for the inconvenience.'")
    AnsiNote("")
    rooms = {}

end

function partroxis_alias_guides()
	local c_cyan = ANSI(1)..ANSI(36)
	local c_red = ANSI(1)..ANSI(31)
	local c_grey = ANSI(22)..ANSI(37)
	local c_green = ANSI(1)..ANSI(32)

    if (curr_room == nil or curr_room.id < 5763 or curr_room.id > 5812) then
        AnsiNote(c_grey.."Galaban whispers 'It looks like you're not in the maze.'")   
        return
    end

    if (show_partroxis_help == false) then
        AnsiNote("")
        AnsiNote(c_grey.."Galaban whispers 'Very well. The guides through the maze will assist you.'")
        if (curr_room.id > 5763) then
           AnsiNote(c_grey.."Galaban whispers 'Be aware that they haven't been paying attention so far.'")
           AnsiNote(c_grey.."Galaban whispers 'So they will not know all the directions that you've already tried.'")
        end
		Execute("")
        enable_partroxis_guides(true)
    else
        AnsiNote("")
        AnsiNote(c_grey.."Galaban whispers 'Very well. You are now on your own.'")
        if (curr_room.id > 5763) then
           AnsiNote(c_grey.."Galaban whispers 'Be aware that they will no longer pay attention to your movements.'")
           AnsiNote(c_grey.."Galaban whispers 'So they will not remember all your paths from here on out.'")
        end
		Execute("")
        enable_partroxis_guides(false)
    end

end

function partroxis_show_help()

    local outstr = [[

Galaban's Partroxis Plugin

This plugin provides "guides" through the Partroxis maze.  When you enter a
room in the maze, the guide will provide the correct direction.  If multiple
directions exist, the guide will show you the two possibilities.  If you choose
wrong, the next time you enter the room, that exit will not be shown.

There is also a speedwalk function that will return you to the last correct
room in the maze:  "partroxis return"

   BY DEFAULT, these guides are not enabled. You will not receive any help.
Re-enter the area or use "partroxis guide" to turn the guides on.

Commands available:

partroxis help        -- this help screen
partroxis guide       -- turn the guides on or off from within the maze
partroxis return      -- return to the last explored room in the maze
partroxis reset       -- reset the internal cache.
]]

print(outstr)

    if (curr_room == nil or curr_room.id < 5763 or curr_room.id > 5812) then
        print("The plugin will feel like part of the area. Head to the Otherworld to see")
        print("for yourself.")
    end

end


-------------------------
-- (Debug) Alias Handlers 
-------------------------
function show_partroxis_exits()

    if (curr_room == nil) then
        AnsiNote("Null room id?  Look around.")
        return
    end
    if (curr_room.id == -1) then
        AnsiNote("This room is no-map.")
        return
    end
    AnsiNote("--------------------")
    AnsiNote("North: "..curr_room.exits.n)
    AnsiNote("East:  "..curr_room.exits.e)
    AnsiNote("South: "..curr_room.exits.s)
    AnsiNote("West:  "..curr_room.exits.w)
    AnsiNote("Up:    "..curr_room.exits.u)
    AnsiNote("Down:  "..curr_room.exits.d)
    AnsiNote("--------------------")
end

function show_partroxis_debug_data()
  AnsiNote("------------------------------------")
  if (show_partroxis_help ~= true) then
     AnsiNote("show guides: false")
  end
  AnsiNote("last_dir: ["..last_direction.."] ("..last_direction_prev..")")
  AnsiNote("rooms in cache: "..tablelength(rooms))
  if (lastroom == nil) then
      AnsiNote("last room: nil")
  else
      AnsiNote("last room: "..lastroom.id)
      if (rooms[lastroom.id] == nil) then
          AnsiNote("last room not in cache")
      end
      AnsiNote("last room dir: " .. lastroom.correct_dir .. "  leads to " .. lastroom.next_id)
      AnsiNote("last room wrong dir1: " .. lastroom.wrong_dir1 .. "   wrong dir2: " .. lastroom.wrong_dir2)

  end

  if (curr_room~= nil) then
  	AnsiNote("current room: "..curr_room.id)
      if (rooms[curr_room.id] == nil) then
          AnsiNote("current room not in cache")
      end
      AnsiNote("current room correct dir: " .. curr_room.correct_dir .. "  leads to " .. curr_room.next_id)
      AnsiNote("current room wrong dir1: " .. curr_room.wrong_dir1 .. "   wrong dir2: " .. curr_room.wrong_dir2)
  end

  AnsiNote("------------------------------------")
  show_partroxis_exits()

end

function show_partroxis_debug_printmap()

    if (rooms == nil) then
        rooms = {}
    end
    AnsiNote("------------------------------------")
    AnsiNote("  ID    Good Exit     Bad Exits ")

    for i,iroom in pairs(rooms) do
        AnsiNote(iroom.id .."    "..iroom.correct_dir.." to "..iroom.next_id.."     wrong1["..iroom.wrong_dir1.."]  wrong2["..iroom.wrong_dir2.."]")
    end

    AnsiNote("------------------------------------")

end

-------------------
-- Partroxis Events
-------------------
lastroom = nil
last_direction = ""
last_direction_prev = ""

function partroxis_room_entered()
	if (curr_room.id == nil) then
        --Not initialized?
        return
    end

    if (rooms == nil) then
		rooms = {}
	end

    reset_curr_room_exits()

    if (curr_room.id == 5862) then
        partroxis_area_entered()
    end
	if (curr_room.id == 5763) then
        greet()
    end
	if (curr_room.id == 5764) then
        partroxis_maze_entered()
    end

    --Above, we always want to fire.
    if(show_partroxis_help ~= nil and show_partroxis_help == false) then
       return
    end

    -- we were in the maze (show_help = true) and now we're not.
    -- The maze is 5763 to 5803.  5812 is the exit, though.
    -- Example:  Recall is 32418.  If we end up there, we will hit this
    if(curr_room.id < 5763 or curr_room.id > 5812) then
        partroxis_maze_exited()
        return
    end

    -- Ok:  We are in the maze and we moved around
    -- Check our last movement and see if it was correct
    check_correct_exit()

    -- If this is already in our map, just reload it and call the correct exit function
    if (rooms[curr_room.id] ~= nil) then
        curr_room = rooms[curr_room.id]

        if (player_state <= 8) then
            DoAfterSpecial(0.2,"correct_exit()",12)
        end
        return
    end

    auto_exit()
end

function partroxis_bad_move()

    -- 5763 is the entrance room, 5803 is the exit room ignores those two
    if (curr_room.id <= 5763 or curr_room.id >= 5803) then
        return
    end
    -- if they're running, don't show this text.
    if (player_state > 8) then
        return
    end
    wait.make (function()
        local c_grey = ANSI(22)..ANSI(37)
        local c_green = ANSI(1)..ANSI(32)

        wait.time(0.2)

        AnsiNote(c_grey.."Galaban whispers 'It looks like you got offtrack somewhere.'")
        if (tablelength(rooms) > 2) then
            AnsiNote(c_grey.."Galaban whispers 'You can follow the guides back or use "..c_green.."partroxis return"..c_grey.." to backtrack.'")
            AnsiNote(c_grey.."Galaban whispers 'It will put you back where you were.'")
        end
        AnsiNote(c_grey.."Galaban whispers 'Don't worry.  That guide won't give the same bad advice.'")

    end)


end

function partroxis_area_entered()
    show_greeting = true
    last_direction = ""
    rooms = {}
end

function partroxis_maze_entered()
    clear_greetings_alias()
end

function partroxis_maze_exited()
    --reset the plugin
    show_greeting = true
    show_partroxis_help = false
    last_direction = ""
    rooms = {}

    clear_greetings_alias()

    DoAfterSpecial(0.5,"clear_temporary_triggers()", sendto.script)

end

function partroxis_invis_reminder()

    if (show_partroxis_help == nil or show_partroxis_help == false) then
        return
    end
    wait.make (function()
        local c_grey = ANSI(22)..ANSI(37)

        wait.time(0.5)

        -- still fighting...
        if (player_state == 8) then
            return
        end

        AnsiNote("")
        AnsiNote(c_grey.."Galaban whispers 'Don't forget to reset your invis spells.'")
        correct_exit()
		Execute("")

    end)

end

function partroxis_area_reset()
	local c_white = ANSI(1)..ANSI(37)
    AnsiNote(c_white.."+----------------------------------+")
    AnsiNote(c_white.."+-    The Partroxis has Reset     -+")
    AnsiNote(c_white.."+-  Cached rooms have been reset  -+")
    AnsiNote(c_white.."+----------------------------------+")

    rooms = {}
    lastroom = nil
    lastdirection = ""

end

--------------------
-- Actualy maze help
--------------------
rooms = {}

function auto_exit()
    if (show_partroxis_help == true) then
        Execute("exits")
    end
end

function partroxis_exit_complete()

   correct_exit()

   last_direction_prev = last_direction

   -- Now that we've processed the last direction, clear it out to avoid accidents
   last_direction = ""
end

function check_correct_exit()
    -- If our last room isn't already stored and our last movement is correct
    -- store the room with the correct direction

    if (lastroom == nil or lastroom.id == -1 or curr_room == nil) then
        return
    elseif (rooms[lastroom.id] ~= nil and rooms[lastroom.id].correct_dir == last_direction) then
        return
    end
    -- just looking around?  Nothing to see here. Move long, move along.
    if(curr_room.id == lastroom.id) then
        return
    end
    -- If they entered a gate, it won't be caught by the aliases. Restore the value
    if (last_direction == "") then
        if(last_direction_prev == "enter gate") then
            last_direction = "enter gate"
        else
            return
        end
    end

    local goodmove = store_last_move()

    if (goodmove == false) then
        partroxis_bad_move()
    end
end

function store_last_move()
    -- Somehow got into a bad state.  Ignore this room.
    if (lastroom.id < 5763 or curr_room.id < 5763 or
        lastroom.id > 5803 or curr_room.id > 5803) then
        return
    end

    -- The maze is 5763 to 5803
    if (rooms[lastroom.id] == nil) then
        rooms[lastroom.id] = lastroom
    end

    -- If we increased by one (eg 5778 to 5779), it's correct
    if (curr_room.id == (lastroom.id + 1)) then
        if (rooms[lastroom.id].correct_dir == "") then
            rooms[lastroom.id].correct_dir = last_direction
            rooms[lastroom.id].next_id = curr_room.id
            --Note("DEBUG:  storing room["..lastroom.id.."]  direction["..last_direction.."] to_id["..curr_room.id.."]")
            return true
        end
        return true
    else
        -- whoops, wrong way. Store that bad direction
        if (rooms[lastroom.id].wrong_dir1 == "" or rooms[lastroom.id].wrong_dir1 == last_direction) then
            rooms[lastroom.id].wrong_dir1 = last_direction
        else
            rooms[lastroom.id].wrong_dir2 = last_direction
        end
        --Note("DEBUG:  storing room["..lastroom.id.."]  wrong direction["..last_direction.."]")
        --Note("DEBUG:     CURR room["..lastroom.id.."]  direction["..rooms[lastroom.id].correct_dir.."]  to_id["..rooms[lastroom.id].next_id.."]")

    end
    return false
end

function correct_exit()
    local next_dir = "unknown"

	if (curr_room.id == 5764) then
        next_dir = find_partroxis_exit("Through the Woods")
        flavor_exit("A Mountain of Rock",next_dir)
        return
    elseif (curr_room.id == 5765) then
        next_dir = find_partroxis_exit("The Forest")
        flavor_exit("The Rabid Tiger-man",next_dir)
        return
    elseif (curr_room.id == 5766) then
        next_dir = find_partroxis_exit("Swampy Path")
        flavor_exit("The man-eating wolfen",next_dir)
        return
    elseif (curr_room.id == 5767) then
        next_dir = find_partroxis_exit("The Forest")
        flavor_exit("The Buck-Toothed Lizard-Man",next_dir)
        return
    elseif (curr_room.id == 5768) then
        next_dir = find_partroxis_exit("Along the River")
        flavor_exit("The Living Tree",next_dir)
        return
    elseif (curr_room.id == 5769) then
        next_dir = find_partroxis_exit("The Desert")
        flavor_exit("The Furious Flying Fish Man",next_dir)
        return
    elseif (curr_room.id == 5770) then
        next_dir = find_partroxis_exit("The Desert")
        flavor_exit("The Quicksand",next_dir)
        return
    elseif (curr_room.id == 5771) then
        next_dir = find_partroxis_exit("The Wheat Fields")
        flavor_exit("The Flesh Eating Ants",next_dir)
        return
    elseif (curr_room.id == 5772) then
        next_dir = find_partroxis_exit("In the Mountains")
        flavor_exit("The Living Vines",next_dir)
        return
    elseif (curr_room.id == 5773) then
        next_dir = find_partroxis_exit("In the Mountains")
        flavor_exit("The Gigantic Bulette",next_dir)
        return
    elseif (curr_room.id == 5774) then
        next_dir = find_partroxis_exit("A Cave")
        flavor_exit("A Bird of Prey",next_dir)
        return
    elseif (curr_room.id == 5775) then
        next_dir = find_partroxis_exit("The Wheat Fields")
        flavor_exit("The Otherworld Assassin",next_dir)
        return
    elseif (curr_room.id == 5776) then
        next_dir = find_partroxis_exit("The Wheat Fields")
        flavor_exit("Vision of a False Portal",next_dir)
        return
    elseif (curr_room.id == 5777) then
        flavor_exit("Vision of a False Portal","ENTER GATE")
        last_direction = "enter gate"
        return
    elseif (curr_room.id == 5778) then
        next_dir = find_partroxis_exit("The Swamp")
        flavor_exit("A Bloodthirsty Tiger-Man",next_dir)
        return
    elseif (curr_room.id == 5779) then
        next_dir = find_partroxis_exit("The Swamp")
        flavor_exit("The Cold Hearted Lizard-Man",next_dir)
        return
    elseif (curr_room.id == 5780) then
        next_dir = find_partroxis_exit("River of Blood")
        flavor_exit("The Insane Cheryb",next_dir)
        return
    elseif (curr_room.id == 5781) then
        next_dir = find_partroxis_exit("A small Cave")
        flavor_exit("Flowing Blood",next_dir)
        return
    elseif (curr_room.id == 5782) then
        next_dir = find_partroxis_exit("A small Cave")
        flavor_exit("A collapsing cave",next_dir)
        return
    elseif (curr_room.id == 5783) then
        next_dir = find_partroxis_exit("Through the Passage of Time")
        flavor_exit("The Dream Eater",next_dir)
        return
    elseif (curr_room.id == 5784) then
        next_dir = find_partroxis_exit("The Swamp")
        flavor_exit("Galaban",next_dir)
        return
    elseif (curr_room.id == 5785) then
        next_dir = find_partroxis_exit("The Forest")
        flavor_exit("Blood Sucking Vines",next_dir)
        return
    elseif (curr_room.id == 5786) then
        next_dir = find_partroxis_exit("The Wheat Fields")
        flavor_exit("The Golden Haired Assassin",next_dir)
        return
    elseif (curr_room.id == 5787) then
        next_dir = find_partroxis_exit("The Wheat Fields")
        flavor_exit("Mass of Flying Dismembered Body Parts",next_dir)
        return
    elseif (curr_room.id == 5788) then
        next_dir = find_partroxis_exit("In the Mountains")
        flavor_exit("Bloodthirsty Killer Gerbils",next_dir)
        return
    elseif (curr_room.id == 5789) then
        next_dir = find_partroxis_exit("The Wheat Fields")
        flavor_exit("Galaban",next_dir)
        return
    elseif (curr_room.id == 5790) then
        next_dir = find_partroxis_exit("Along the River")
        flavor_exit("the Thing",next_dir)
        return
    elseif (curr_room.id == 5791) then
        next_dir = find_partroxis_exit("The Wheat Field")
        flavor_exit("The Big and Deadly Dragon",next_dir)
        return
    elseif (curr_room.id == 5792) then
        --next_dir = find_partroxis_exit("In the Mountains")
        flavor_exit("Soul of the Damned","ENTER GATE")
		last_direction = "enter gate"
        return
    elseif (curr_room.id == 5793) then
        next_dir = find_partroxis_exit("In the Mountains")
        flavor_exit("Lesser Chitryn",next_dir)
        return
    elseif (curr_room.id == 5794) then
        next_dir = find_partroxis_exit("The Desert")
        flavor_exit("Delusions of Hope",next_dir)
        return
    elseif (curr_room.id == 5795) then
        next_dir = find_partroxis_exit("The Swamp")
        flavor_exit("Swarm of Blood Sucking Bio-chemical Gnats",next_dir)
        return
    elseif (curr_room.id == 5796) then
        next_dir = find_partroxis_exit("The Desert")
        flavor_exit("It",next_dir)
        return
    elseif (curr_room.id == 5797) then
        next_dir = find_partroxis_exit("The Wheat Field")
        flavor_exit("Your Worst Nightmare",next_dir)
        return
    elseif (curr_room.id == 5798) then
        next_dir = find_partroxis_exit("A Cave")
        flavor_exit("Galaban",next_dir)
        return
    elseif (curr_room.id == 5799) then
        next_dir = find_partroxis_exit("A Cave")
        flavor_exit("Galaban",next_dir)
        return
    elseif (curr_room.id == 5800) then
        next_dir = find_partroxis_exit("In the Mountains")
        flavor_exit("Galaban",next_dir)
        return
    elseif (curr_room.id == 5801) then
        next_dir = find_partroxis_exit("In the Mountains")
        flavor_exit("Galaban",next_dir)
        return
    elseif (curr_room.id == 5802) then
        next_dir = find_partroxis_exit("A vast Expanse of Plains")
        flavor_exit("Hell Hound Behemoths",next_dir)
        return
    elseif (curr_room.id == 5803) then
        --next_dir = find_partroxis_exit("A vast Expanse of Plains")
        flavor_exit("Chitryn","ENTER GATE")
        return
    end

	Note("You're not in the Partroxis maze!  (room: "..curr_room.id..")")
end


function find_partroxis_exit(nextexit)
    if (curr_room.correct_dir ~= "") then
        return translate_exit_to_readable(curr_room.correct_dir)
    end

    local out_string = ""
    if (curr_room.exits.n ~= nil and curr_room.exits.n == nextexit and
        curr_room.wrong_dir1 ~= "n" and curr_room.wrong_dir2 ~= "n") then
        out_string = append_exit_dirs(out_string,"NORTH")
    end
    if (curr_room.exits.e ~= nil and curr_room.exits.e == nextexit and
        curr_room.wrong_dir1 ~= "e" and curr_room.wrong_dir2 ~= "e") then
        out_string = append_exit_dirs(out_string,"EAST")
    end
    if (curr_room.exits.s ~= nil and curr_room.exits.s == nextexit and
        curr_room.wrong_dir1 ~= "s" and curr_room.wrong_dir2 ~= "s") then
        out_string = append_exit_dirs(out_string,"SOUTH")
    end
    if (curr_room.exits.w ~= nil and curr_room.exits.w == nextexit and
        curr_room.wrong_dir1 ~= "w" and curr_room.wrong_dir2 ~= "w") then
        out_string = append_exit_dirs(out_string,"WEST")
    end
    if (curr_room.exits.u ~= nil and curr_room.exits.u == nextexit and
        curr_room.wrong_dir1 ~= "u" and curr_room.wrong_dir2 ~= "u") then
        out_string = append_exit_dirs(out_string,"UP")
    end
    if (curr_room.exits.d ~= nil and curr_room.exits.d == nextexit and
        curr_room.wrong_dir1 ~= "d" and curr_room.wrong_dir2 ~= "d") then
        out_string = append_exit_dirs(out_string,"DOWN")
    end

    if (out_string == "") then
        return "to the void"
    end
    return out_string
end

function append_exit_dirs(curr_str, new_string)
    if (curr_str ~= "") then
        curr_str = curr_str .. " or "
    end
    curr_str = curr_str .. new_string
    return curr_str
end

function translate_exit_to_readable(short_dir)
    if (short_dir == "n") then
        return "NORTH"
    elseif (short_dir == "s") then
        return "SOUTH"
    elseif (short_dir == "e") then
        return "EAST"
    elseif (short_dir == "w") then
        return "WEST"
    elseif (short_dir == "u") then
        return "UP"
    elseif (short_dir == "d") then
        return "DOWN"
    end
end

function flavor_exit(mob_name, next_dir)
   	local c_cyan = ANSI(1)..ANSI(36)
	local c_red = ANSI(1)..ANSI(31)
	local c_grey = ANSI(22)..ANSI(37)
	local c_green = ANSI(1)..ANSI(32)

    wait.make (function()
        wait.time(0.1)
        AnsiNote("")
        AnsiNote(c_grey..mob_name.." points "..c_green..next_dir)
        AnsiNote("")
    end)
end

--------------------
--  Temporary items
--------------------
function make_temporaries()

    -- greeting yes/no response
    AddAlias("tempPartroxisAlias1","yes","",alias_flag.Enabled + alias_flag.Temporary,"accept_partroxis_help")
    AddAlias("tempPartroxisAlias2","no","",alias_flag.Enabled + alias_flag.Temporary,"decline_partroxis_help")


	--  Temporary trigger to remind the player to re-invis
    AddTriggerEx("tempPartroxisTrigger2", 
        "You receive * experience points.", 
        "",  
        trigger_flag.Enabled + trigger_flag.Temporary, 
        -1, 0, "", "partroxis_invis_reminder", sendto.script, 100)

end

function clear_greetings_alias()
    DeleteAlias("tempPartroxisAlias1")
    DeleteAlias("tempPartroxisAlias2")
end

function clear_temporary_triggers()
    --DeleteTrigger("tempPartroxisTrigger1")
    DeleteTrigger("tempPartroxisTrigger2")
    EnableTriggerGroup("partroxis_exit_triggers",false)
    EnableAliasGroup("partroxis_movement",false)
end



------------------
--  Greeting stuff
------------------
function greet()
	local c_cyan = ANSI(1)..ANSI(36)
	local c_red = ANSI(1)..ANSI(31)
	local c_grey = ANSI(22)..ANSI(37)
	local c_green = ANSI(1)..ANSI(32)

    if(show_greeting ~= nil and show_greeting == false) then
        return
    end
    show_greeting = false

    -- setup
    make_temporaries()
    if (show_partroxis_help == nil) then
        show_partroxis_help = false
    end

    wait.make (function()

        wait.time(0.5)

        AnsiNote("")
        AnsiNote(c_red.."A portal opens up and out steps Galaban.")

        wait.time(0.2)

        AnsiNote("")
        AnsiNote(c_cyan.."Galaban says 'Greetings.  Would you like assistance through the maze?'")
        AnsiNote(c_grey.."type '"..c_green.."yes"..c_grey.."' to ask for guides through the maze.")
        AnsiNote(c_grey.."type '"..c_red.."no"..c_grey.."' to attempt without help.")
		Execute("")

    end)

end

function enable_partroxis_guides(enabled)
    show_partroxis_help = enabled
    EnableTriggerGroup("partroxis_exit_triggers",enabled)
    EnableAliasGroup("partroxis_movement",enabled)
end

function accept_partroxis_help()
	local c_cyan = ANSI(1)..ANSI(36)
	local c_grey = ANSI(22)..ANSI(37)
	local c_red = ANSI(1)..ANSI(31)

    DoAfterSpecial(0.5,"clear_greetings_alias()", sendto.script)
    enable_partroxis_guides(true)
    wait.make (function()

        AnsiNote("")
        AnsiNote(c_cyan.."Galaban says 'I'm glad to hear that.  My helpers will show you the way.'")
        AnsiNote(c_cyan.."Galaban says 'Sometimes they don't know the exact direction.'")
        AnsiNote(c_cyan.."Galaban says 'But do not fear.  They won't send you the wrong direction twice.'")

        wait.time(0.2)
        AnsiNote("")
        AnsiNote(c_grey.."Galaban reaches into his pockets and throws lua dust over the maze.")
        AnsiNote(c_cyan.."Galaban says 'The first room is north.'")
		Execute("open north")

        wait.time(0.5)

        AnsiNote("")
        AnsiNote(c_red.."A portal opens up and Galaban disappears into it.")
		Execute("")

    end)

end

function decline_partroxis_help()
	local c_cyan = ANSI(1)..ANSI(36)
	local c_grey = ANSI(22)..ANSI(37)
	local c_red = ANSI(1)..ANSI(31)
	local c_green = ANSI(1)..ANSI(32)

    DoAfterSpecial(0.5,"clear_greetings_alias()", sendto.script)

    enable_partroxis_guides(false)

    wait.make (function()

        AnsiNote("")
        AnsiNote(c_grey.."Galaban nods.")
        AnsiNote(c_cyan.."Galaban says 'Very well.  The best of luck to you!'.")
        AnsiNote(c_cyan.."Galaban says 'If ever you need help, you can always use '"..c_green.."partroxis guide"..c_cyan.."' to ask for help.'.")
        AnsiNote(c_cyan.."Galaban says 'However, there will be no previous knowledge of the area.'.")

        wait.time(0.5)

        AnsiNote("")
        AnsiNote(c_red.."A portal opens up and Galaban disappears into it.")
		Execute("")

    end)


end

--------------------
-- Utility Functions
--------------------
function tablelength(table)
  local count = 0
  for _ in pairs(table) do count = count + 1 end
  return count
end


]]>
</script>


<!--  Plugin help  -->

<aliases>
  <alias
   script="OnHelp"
   match="Galabans_Partroxis_Plugin:help"
   enabled="y"
  >
  </alias>
</aliases>

<script>
<![CDATA[
function OnHelp ()
  world.Note (world.GetPluginInfo (world.GetPluginID (), 3))
end
]]>
</script> 

</muclient>
